
#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable

#include "rtcommon.glsl"
#include "restir.glsl"

// Ray Data //////////////////////////////////////////

layout(location = 0) rayPayloadEXT Ray_Payload payload;

// Scene Data //////////////////////////////////////////

layout(binding = 0) uniform UniformBufferObject {
	mat4 V, P, iV, iP;
	ReSTIRConstants restir;
} uniforms;

layout(binding = 1, std430) readonly buffer SceneDescs {
	Scene_Obj objects[];
};

layout(binding = 2, std430) readonly buffer SceneLights {
	Scene_Light lights[];
};

layout(binding = 3, std430) readonly buffer Vertices { 
	Vertex v[]; 
} vertices[];

layout(binding = 4, std430) readonly buffer Indices {
	uint i[];
} indices[];

layout(binding = 5) uniform sampler2D Textures[];

layout(binding = 6) uniform accelerationStructureEXT TLAS;

layout(binding = 7, rgba32f) uniform image2D image;

layout (binding = 8) writeonly buffer Reservoirs {
	Reservoir reservoirs[];
};

layout (binding = 9) readonly buffer PrevFrameReservoirs {
	Reservoir prevFrameReservoirs[];
};

layout(binding = 10, rgba32f) uniform image2D pos_image;
layout(binding = 11, rgba32f) uniform image2D norm_image;
layout(binding = 12, rgba32f) uniform image2D alb_image;

layout(binding = 13) uniform sampler2D ppos_image;
layout(binding = 14) uniform sampler2D pnorm_image;
layout(binding = 15) uniform sampler2D palb_image;

////////////////////////////////////////////

uint seed;

HitInfo hit_info() {

	const uint objId = objects[payload.obj_id].index;
    const mat4 modelIT = objects[payload.obj_id].modelIT;
    const mat4 model = objects[payload.obj_id].model;
    const vec3 bary = payload.barycentrics;

	HitInfo hit;
	ivec3 ind = ivec3(indices[objId].i[3 * payload.prim_id + 0],
					  indices[objId].i[3 * payload.prim_id + 1],
					  indices[objId].i[3 * payload.prim_id + 2]);

	Vertex v0 = vertices[objId].v[ind.x];
	Vertex v1 = vertices[objId].v[ind.y];
	Vertex v2 = vertices[objId].v[ind.z];

	hit.normal = v0.norm_ty.xyz * bary.x + v1.norm_ty.xyz * bary.y + v2.norm_ty.xyz * bary.z;
	hit.normal = normalize(vec3(modelIT * vec4(hit.normal, 0.0)));

	vec3 t0 = v0.tangent.xyz * v0.tangent.w;
	vec3 t1 = v1.tangent.xyz * v1.tangent.w;
	vec3 t2 = v2.tangent.xyz * v2.tangent.w;
	hit.tangent = t0 * bary.x + t1 * bary.y + t2 * bary.z;
	hit.tangent = normalize(vec3(modelIT * vec4(hit.tangent, 0.0)));

	hit.pos = v0.pos_tx.xyz * bary.x + v1.pos_tx.xyz * bary.y + v2.pos_tx.xyz * bary.z;
	hit.pos = vec3(model * vec4(hit.pos, 1.0));

	vec2 tc0 = vec2(v0.pos_tx.w, v0.norm_ty.w);
	vec2 tc1 = vec2(v1.pos_tx.w, v1.norm_ty.w);
	vec2 tc2 = vec2(v2.pos_tx.w, v2.norm_ty.w);
	hit.texcoord = tc0 * bary.x + tc1 * bary.y + tc2 * bary.z;
	return hit;
}

MatInfo mat_info(HitInfo hit) {

	MatInfo mat;
	
	int albedoIdx = objects[payload.obj_id].albedo_tex;
	mat.albedo = objects[payload.obj_id].albedo.xyz;
	if(albedoIdx >= 0) {
		mat.albedo = texture(Textures[albedoIdx], hit.texcoord).xyz;
	}

	int emissiveIdx = objects[payload.obj_id].emissive_tex;
	mat.emissive = objects[payload.obj_id].emissive.xyz;
	if(emissiveIdx >= 0) {
		mat.emissive = texture(Textures[emissiveIdx], hit.texcoord).xyz;
	}

	int mrIdx = objects[payload.obj_id].metal_rough_tex;
	vec2 metal_rough = objects[payload.obj_id].metal_rough.xy;
	if(mrIdx >= 0) {
		metal_rough = texture(Textures[mrIdx], hit.texcoord).xy;
	}
	
	mat.roughness = metal_rough.y;

	if(consts.use_metalness == 1)
		mat.albedo = mix(vec3(0.04), mat.albedo, metal_rough.x);

	int nIdx = objects[payload.obj_id].normal_tex;
	mat.use_tanspace = nIdx >= 0;
	if(mat.use_tanspace) {
		mat.tanspaceNormal = texture(Textures[nIdx], hit.texcoord).xyz * 2.0 - 1.0;
	}
	return mat;
}

ShadeInfo shade_info(TraceInfo trace, HitInfo hit, MatInfo mat) {

	ShadeInfo shade;

	shade.wo = trace.d;
	if(dot(shade.wo, hit.normal) > 0) hit.normal = -hit.normal;

	shade.T = hit.tangent;
	shade.N = hit.normal;

	if(mat.use_tanspace && consts.use_normal_map == 1) {
		shade.B = cross(shade.N, shade.T);
		shade.N = normalize(mat3(shade.T, shade.B, shade.N) * mat.tanspaceNormal);
	}

	make_tanspace(shade.N, shade.T, shade.B);
	return shade;
}

Scene_Light_Sample light_sample(vec3 p) {
	
	Scene_Light_Sample samp;

	samp.l_idx = randu(seed, 0, consts.n_lights);
	samp.o_idx = lights[samp.l_idx].index;
	
	uint n_tris = lights[samp.l_idx].n_triangles;
	samp.t_idx = randu(seed, 0, n_tris);

	ivec3 ind = ivec3(indices[samp.o_idx].i[3 * samp.t_idx + 0],
					  indices[samp.o_idx].i[3 * samp.t_idx + 1],
					  indices[samp.o_idx].i[3 * samp.t_idx + 2]);

	Vertex v0 = vertices[samp.o_idx].v[ind.x];
	Vertex v1 = vertices[samp.o_idx].v[ind.y];
	Vertex v2 = vertices[samp.o_idx].v[ind.z];

	vec3 _v0 = v0.pos_tx.xyz;
	vec3 _v1 = v1.pos_tx.xyz;
	vec3 _v2 = v2.pos_tx.xyz;
	_v0 = vec3(objects[samp.o_idx].model * vec4(_v0, 1.0));
	_v1 = vec3(objects[samp.o_idx].model * vec4(_v1, 1.0));
	_v2 = vec3(objects[samp.o_idx].model * vec4(_v2, 1.0));

	vec3 bary = triangle_sample(seed);
	vec2 texcoord = vec2(v0.pos_tx.w, v1.norm_ty.w) * bary.x + vec2(v1.pos_tx.w, v1.norm_ty.w) * bary.y + vec2(v2.pos_tx.w, v1.norm_ty.w) * bary.z;
	
	samp.pos = _v0 * bary.x + _v1 * bary.y + _v2 * bary.z;

	int emissiveIdx = objects[samp.o_idx].emissive_tex;
	samp.emissive = objects[samp.o_idx].emissive.xyz;
	if(emissiveIdx >= 0) {
		samp.emissive = texture(Textures[emissiveIdx], texcoord).xyz;
	}
	
	vec3 Narea = cross(_v1 - _v0, _v2 - _v0);
	float a = 2 / length(Narea);
	vec3 dist = samp.pos - p;
	vec3 N = normalize(Narea);
	vec3 d = normalize(dist);
	float g = dot(dist, dist) / abs(dot(N, d));

	samp.normal = N;
	samp.pdf = a * g / (n_tris * consts.n_lights);

	return samp;
}

vec3 light_sample_dir(vec3 p) {
	
	uint l_idx = randu(seed, 0, consts.n_lights);
	uint o_idx = lights[l_idx].index;
	uint n_tris = lights[l_idx].n_triangles;
	uint t_idx = randu(seed, 0, n_tris);

	ivec3 ind = ivec3(indices[o_idx].i[3 * t_idx + 0],
					  indices[o_idx].i[3 * t_idx + 1],
					  indices[o_idx].i[3 * t_idx + 2]);

	Vertex v0 = vertices[o_idx].v[ind.x];
	Vertex v1 = vertices[o_idx].v[ind.y];
	Vertex v2 = vertices[o_idx].v[ind.z];

	vec3 bary = triangle_sample(seed);
	vec3 point = v0.pos_tx.xyz * bary.x + v1.pos_tx.xyz * bary.y + v2.pos_tx.xyz * bary.z;
	point = vec3(objects[o_idx].model * vec4(point, 1.0));

	return normalize(point - p);
}

float light_pdf(vec3 p, vec3 d) {

	float oacc = 0;
	for(uint l = 0; l < consts.n_lights; l++) {
		
		float tacc = 0;
		uint o_idx = lights[l].index;
		uint n_tris = lights[l].n_triangles;

		if(!hit_bbox(p, d, lights[l].bb_min.xyz, lights[l].bb_max.xyz))
			continue;

		for(uint t = 0; t < n_tris; t++) {

			ivec3 ind = ivec3(indices[o_idx].i[3 * t + 0],
							  indices[o_idx].i[3 * t + 1],
							  indices[o_idx].i[3 * t + 2]);

			vec3 v0 = vertices[o_idx].v[ind.x].pos_tx.xyz;
			vec3 v1 = vertices[o_idx].v[ind.y].pos_tx.xyz;
			vec3 v2 = vertices[o_idx].v[ind.z].pos_tx.xyz;

			v0 = vec3(objects[o_idx].model * vec4(v0, 1.0));
			v1 = vec3(objects[o_idx].model * vec4(v1, 1.0));
			v2 = vec3(objects[o_idx].model * vec4(v2, 1.0));

			tacc += triangle_pdf(p, d, v0, v1, v2);
		}

		oacc += tacc / float(n_tris);
	}

	return oacc / float(consts.n_lights);
}

void trace_ray(vec3 o, vec3 d) {
    traceRayEXT(TLAS,           // acceleration structure
        gl_RayFlagsOpaqueEXT,   // rayFlags
        0xFF,                   // cullMask
        0,                      // sbtRecordOffset
        0,                      // sbtRecordStride
        0,                      // missIndex
        o,                      // ray origin
        EPS,                    // ray min range
        d,                      // ray direction
        LARGE_DIST,             // ray max range
        0                       // payload (location = 0)
    );
}

bool visibility(vec3 a, vec3 b) {
	
	vec3 dir = b-a;
	float d = length(dir);

	payload.hit = true;
    traceRayEXT(TLAS,           // acceleration structure
        gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT,   // rayFlags
        0xFF,                   // cullMask
        0,                      // sbtRecordOffset
        0,                      // sbtRecordStride
        0,                      // missIndex
        a,                      // ray origin
        EPS,                    // ray min range
        dir / d,                // ray direction
        d - EPS,                // ray max range
        0                       // payload (location = 0)
    );
	return payload.hit;
}

vec3 direct_light(vec3 o, vec3 d) {
    trace_ray(o, d);
	if(!payload.hit) {
		return consts.env_light.xyz;
	}
    HitInfo hit = hit_info();
    MatInfo mat = mat_info(hit);
    return mat.emissive;
}

void integrate_mis(inout TraceInfo trace, HitInfo hit, MatInfo mat, ShadeInfo shade) {

	if(any(greaterThan(mat.emissive, vec3(0)))) {
	    trace.acc += trace.throughput * trace.mis * mat.emissive;
		trace.depth = consts.max_depth;
		return;
	}

	trace.o = hit.pos;
	
	if(mat.roughness == 0) {

		trace.d = reflect(shade.wo, shade.N);
		trace.throughput *= mat.albedo;
		trace.mis = 1;

	} else {
		
		vec3 wi_light = light_sample_dir(hit.pos);
		float light_pdf_l = light_pdf(hit.pos, wi_light);

		if(light_pdf_l != 0) {
			
            float light_pdf_m = MAT_pdf(mat, shade, wi_light);
			vec3 light_atten = MAT_eval(mat, shade, wi_light);
            vec3 weight = light_atten / light_pdf_l * power_heuristic(light_pdf_l, light_pdf_m);
			
            trace.acc += trace.throughput * weight * direct_light(hit.pos, wi_light);
		}

		vec3 wi_brdf;
		if(!MAT_sample(seed, mat, shade, wi_brdf)) {
			trace.depth = consts.max_depth;
			return;
		}

		float brdf_pdf_m = MAT_pdf(mat, shade, wi_brdf);

		if(brdf_pdf_m != 0) {
			float brdf_pdf_l = light_pdf(hit.pos, wi_brdf);
			vec3 brdf_atten = MAT_eval(mat, shade, wi_brdf);
			trace.throughput *= brdf_atten / brdf_pdf_m;
			trace.mis = power_heuristic(brdf_pdf_m, brdf_pdf_l);
		} else {
			trace.depth = consts.max_depth;
			return;
		}

		trace.d = wi_brdf;
	}
}

void integrate_mats(inout TraceInfo trace, HitInfo hit, MatInfo mat, ShadeInfo shade) {

	if(any(greaterThan(mat.emissive, vec3(0)))) {
        trace.acc += mat.emissive * trace.throughput;
		trace.depth = consts.max_depth;
		return;
	}

	trace.o = hit.pos;
	
	if(mat.roughness == 0) {
		
		trace.d = reflect(shade.wo, shade.N);
		trace.throughput *= mat.albedo;

	} else {

		vec3 wi;
		if(!MAT_sample(seed, mat, shade, wi)) {
			trace.depth = consts.max_depth;
			return;
		}
		
		float pdf = MAT_pdf(mat, shade, wi);
		vec3 atten = MAT_eval(mat, shade, wi);
		if(pdf != 0) {
			trace.throughput *= atten / pdf;
		} else {
			trace.depth = consts.max_depth;
			return;
		}
	
		trace.d = wi;
	}
}

void integrate_direct(inout TraceInfo trace, HitInfo hit, MatInfo mat, ShadeInfo shade) {

	trace.depth = consts.max_depth;
	
	if(any(greaterThan(mat.emissive, vec3(0)))) {
	    trace.acc += mat.emissive;
		return;
	}

	if(mat.roughness != 0) {
		
		Scene_Light_Sample light = light_sample(hit.pos);
		vec3 wi = normalize(light.pos - hit.pos);
		vec3 light_atten = MAT_eval(mat, shade, wi);

        if(light.pdf != 0) {
			float shadow = visibility(hit.pos, light.pos) ? 0 : 1;
            trace.acc += light_atten / light.pdf * light.emissive * shadow;
		}
	}
}

void reservoir_sample(inout TraceInfo trace, HitInfo hit, MatInfo mat, ShadeInfo shade) {

	Reservoir new_res = res_new();

	for(int i = 0; i < uniforms.restir.new_samples; i++) {
		
		Scene_Light_Sample light = light_sample(hit.pos);
		vec3 wi = normalize(light.pos - hit.pos);
		vec3 light_atten = MAT_eval(mat, shade, wi);

		vec3 contrib = light_atten * light.emissive / light.pdf;
		res_update(seed, new_res, luma(contrib), light.pos, light.normal, light.emissive);
	}

	vec3 dir = new_res.pos - hit.pos;
	vec3 wi = normalize(dir);
	vec3 light_atten = MAT_eval(mat, shade, wi);
	float g = abs(dot(new_res.normal, wi)) / dot(dir, dir);
	vec3 contrib = g * light_atten * new_res.emissive;
	float pHat = luma(contrib);
	new_res.w = (1 / pHat) * (new_res.w_sum / new_res.n_seen);
	if(pHat == 0 || visibility(hit.pos, new_res.pos)) {
		new_res.w = 0;
		new_res.w_sum = 0;
		new_res.n_seen = 0;
	}

	for(;;) {
		vec4 prev_pos = uniforms.restir.prev_PV * vec4(hit.pos, 1.0f);
		prev_pos.xyz /= prev_pos.w;
		prev_pos.xy = (prev_pos.xy + 1.0f) * 0.5f;
		
		if(!(consts.reset_res == 0 && 
		   all(greaterThan(prev_pos.xy, vec2(0))) &&
		   all(lessThan(prev_pos.xy, vec2(1))))) break;

		vec2 prev_frag = prev_pos.xy;
		vec3 old_pos = texture(ppos_image, vec2(prev_frag)).xyz;
		vec3 old_norm = texture(pnorm_image, vec2(prev_frag)).xyz;
		vec3 old_alb = texture(palb_image, vec2(prev_frag)).xyz;

		vec3 posdiff = old_pos - hit.pos;
		if(dot(posdiff, posdiff) > 0.01) break;
		vec3 albdiff = old_alb - mat.albedo;
		if(dot(albdiff, albdiff) > 0.01) break;
		if(dot(old_norm, shade.N) < 0.5) break;

		vec2 ssize = vec2(gl_LaunchSizeEXT);
		ivec2 prev_fragcoord = ivec2(prev_pos.xy * ssize);
		Reservoir old_res = prevFrameReservoirs[prev_fragcoord.y * gl_LaunchSizeEXT.x + prev_fragcoord.x];

		Reservoir temporal_res = res_new();

		res_update(seed, temporal_res, pHat * new_res.w * new_res.n_seen, new_res.pos, new_res.normal, new_res.emissive);

		vec3 old_dir = old_res.pos - hit.pos;
		vec3 old_wi = normalize(old_dir);
		vec3 old_light_atten = MAT_eval(mat, shade, old_wi);
		float old_g = abs(dot(old_res.normal, old_wi)) / dot(old_dir, old_dir);
		vec3 old_contrib = old_g * old_light_atten * old_res.emissive;
		float old_pHat = luma(old_contrib);
		
		old_res.n_seen = min(uniforms.restir.temporal_multiplier * new_res.n_seen, old_res.n_seen);
		res_update(seed, temporal_res, old_pHat * old_res.w * old_res.n_seen, old_res.pos, old_res.normal, old_res.emissive);

		temporal_res.n_seen = new_res.n_seen + old_res.n_seen;

		vec3 new_dir = temporal_res.pos - hit.pos;
		vec3 new_wi = normalize(new_dir);
		vec3 new_light_atten = MAT_eval(mat, shade, new_wi);
		float new_g = abs(dot(temporal_res.normal, new_wi)) / dot(new_dir, new_dir);
		vec3 new_contrib = new_g * new_light_atten * temporal_res.emissive;
		float new_pHat = luma(new_contrib);
		temporal_res.w = (1 / pHat) * (temporal_res.w_sum / temporal_res.n_seen);
		if(pHat == 0 || temporal_res.n_seen == 0) temporal_res.w = 0;

		new_res = temporal_res;
		break;
	}
	
	uint res_idx = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x;
	reservoirs[res_idx] = new_res;
	
	if(new_res.w != 0) {
		vec3 dir = new_res.pos - hit.pos;
		vec3 wi = normalize(dir);
		vec3 light_atten = MAT_eval(mat, shade, wi);
		vec3 contrib = light_atten * new_res.emissive;
		float g = abs(dot(new_res.normal, wi)) / dot(dir, dir);
		trace.acc += new_res.w * contrib * g;
	}
}

void integrate_restir(inout TraceInfo trace, HitInfo hit, MatInfo mat, ShadeInfo shade, bool d_only) {

	if(any(greaterThan(mat.emissive, vec3(0)))) {
	    trace.acc += mat.emissive * trace.throughput * trace.mis;
		trace.depth = consts.max_depth;
		return;
	}

	trace.o = hit.pos;

	if(mat.roughness == 0) {

		trace.d = reflect(shade.wo, shade.N);
		trace.throughput *= mat.albedo;
		trace.mis = 1;

	} else {
		
		if(trace.depth == 0) reservoir_sample(trace, hit, mat, shade);

		vec3 wi_brdf;
		if(!MAT_sample(seed, mat, shade, wi_brdf)) {
			trace.depth = consts.max_depth;
			return;
		}

		float brdf_pdf = MAT_pdf(mat, shade, wi_brdf);
		if(brdf_pdf != 0) {
			vec3 brdf_atten = MAT_eval(mat, shade, wi_brdf);
			trace.throughput *= brdf_atten / brdf_pdf;
			trace.mis = trace.depth == 0 ? 0 : 1;
		} else {
			trace.depth = consts.max_depth;
			return;
		}

		trace.d = wi_brdf;
	}

	if(d_only) {
		trace.depth = consts.max_depth;
	}
}

void make_camera_ray(uint s, out vec3 d) {

    vec2 jitter;
    if(consts.qmc == 0) {
        jitter = consts.frame == 0 ? vec2(0.5) : vec2(randf(seed), randf(seed));
    } else {
        jitter = hammersley(s + consts.samples * consts.frame, consts.samples * consts.max_frame);
    }

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + jitter;
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec4 target = uniforms.iP * vec4(inUV * 2.0 - 1.0, 0, 1);
    vec4 direction = uniforms.iV * vec4(target.xyz, 0);
    d = normalize(direction.xyz);
}

void main() {

    seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    vec3 acc = vec3(0);
    vec3 camera_o = (uniforms.iV * vec4(0, 0, 0, 1)).xyz;
	vec3 gbuf_pos = vec3(0), gbuf_norm = vec3(0), gbuf_albedo = vec3(0);

    for(int s = 0; s < consts.samples; s++) {

        TraceInfo trace;
        trace.o = camera_o;
        make_camera_ray(s, trace.d);
        trace.acc = vec3(0);
        trace.throughput = vec3(1);
        trace.depth = 0;
        trace.mis = 1;

        for(; trace.depth < consts.max_depth; trace.depth++) {
            
            trace_ray(trace.o, trace.d);

            if(!payload.hit) {
                if(trace.depth == 0) {
                    trace.acc = consts.clear_col.xyz;
                } else {
                    trace.acc += consts.env_light.xyz * trace.throughput;
                }
                break;
            }

            HitInfo hit = hit_info();
            MatInfo mat = mat_info(hit);
            ShadeInfo shade = shade_info(trace, hit, mat);

			if(s == 0 && trace.depth == 0) {
				gbuf_pos = hit.pos;
				gbuf_norm = shade.N;
				gbuf_albedo = mat.albedo;
			}

            if(consts.integrator == 0) {
                integrate_direct(trace, hit, mat, shade);
            } else if(consts.integrator == 1) {
                integrate_mats(trace, hit, mat, shade);
            } else if(consts.integrator == 2) {
                integrate_mis(trace, hit, mat, shade);
            } else if(consts.integrator == 3) {
				integrate_restir(trace, hit, mat, shade, true);
			} else if(consts.integrator == 4) {
				integrate_restir(trace, hit, mat, shade, false);
			}

            if(consts.use_rr == 1) {
                float pcont = min(max(trace.throughput.x, max(trace.throughput.y, trace.throughput.z)) + 0.001, 0.95);
                if(randf(seed) >= pcont)
                    break;
                trace.throughput /= pcont;
            }
        }

        acc += trace.acc;
    }

    vec3 avg = acc / consts.samples;
    if(consts.frame > 0) {
        float a         = 1.0f / float(consts.frame + 1);
        vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, avg, a), 1));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(avg, 1));
    }

	if(consts.debug_view > 0) {
		vec4 prev_pos = uniforms.restir.prev_PV * vec4(gbuf_pos, 1.0f);
		prev_pos.xyz /= prev_pos.w;
		prev_pos.xy = (prev_pos.xy + 1.0f) * 0.5f;
		
		if(dot(gbuf_norm, gbuf_norm) > 0.5 && 
		   all(greaterThan(prev_pos.xy, vec2(0))) &&
		   all(lessThan(prev_pos.xy, vec2(1)))) {

			vec2 prev_frag = prev_pos.xy;

			vec3 old_pos = texture(ppos_image, vec2(prev_frag)).xyz;
			vec3 old_norm = texture(pnorm_image, vec2(prev_frag)).xyz;
			vec3 old_alb = texture(palb_image, vec2(prev_frag)).xyz;

			if(consts.debug_view == 1) {
				imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(old_pos, 1));
			} else if(consts.debug_view == 2) {
				imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(old_norm, 1));
			} else if(consts.debug_view == 3) {
				imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(old_alb, 1));
			}
		} else {
			imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0, 0, 0, 1));
		}
	}

	imageStore(pos_image, ivec2(gl_LaunchIDEXT.xy), vec4(gbuf_pos, 1));
	imageStore(norm_image, ivec2(gl_LaunchIDEXT.xy), vec4(gbuf_norm, 1));
	imageStore(alb_image, ivec2(gl_LaunchIDEXT.xy), vec4(gbuf_albedo, 1));
}

